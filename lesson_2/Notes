# Lesson 2 Contents

+ [Truthiness](#truthiness)
+ [Virtual Environments](#virtual-environments-venv)
+ [Pseudocode](#pseudocode)
+ [Flowcharts](#flowcharts)
+ [Pylint](#pylint)

## Truthiness

### Booleans

These actually capture `True` and `False` rather than *truthy* and *falsy* - they are the definitive versions of truthiness  
[**Logical Operators**](#logical-operators) will evaluate their operands and return boolean value:

        num = 4
        num < 10    # True

The return of a Boolean isn't often useful, but using that Boolean to return the result of a conditional expression is more useful:

        num = 4
        if num < 3:
            print('less than 3') # this is more useful than `True`
        else:
            print('3 or more')

### Logical Operators

#### `and`

+ Returns `True` when **all** sub-expressions evaluate to `True`
+ Sub-expressions can be chained and are evaluated from left to right:

        num = 10

        (num > 2) and (num < 15) and (num % 2 == 0)
            # True: between 2-15 and even

        (num > 2) and (num < 15) and (num % 2 == 1)
            # False: between 2-15 and odd

  + If **any** are `False`, the whole expression will return `False`
  + Parentheses not required (`<` and `>` have *higher* precedence than `and`), but it's clearer and foolproof

#### `or`

+ Returns `True` when either sub-expression (the operands) are evaluate to `True`
+ Can also be chained as above:

        num = 10

        (num > 2) or (num < 15) or (num % 2 == 0)
            # True: more than 2, or less than 15 or even

        (num > 2) or (num < 15) or (num % 2 == 1)
            # True: more than 2, or less than 15 or odd

#### `not`

+ Returns the inverse of the truth value of the condition (logical negation):

        num = 10
        
        num > 2         # True
        not (num > 2)   # False

### Short-Circuits

This is the idea that Python can stop evaluating sub-expressions if it already knows the evaluation of the whole expression

Expressions containing `and` and `or` exhibit this, as they move from left to right. They will short circuit when:

+ A sub-expression in an `and` expression evaluates as `False`
+ A sub-expression in an `or` expression evaluates as `True`

The remaining expressions are ***not*** evaluated which can be useful if they might contain exceptions (errors):

    if name != None and name.isupper():
        print(f"Hi, {name}.")
    else:
        print("Hello, whoever you are.")


Here, the variable `name` must be anything other than `None` to avoid an error. If it's in CAPS, it will print "Hi, {name}" but if not, it will print ("Hello, whoever you are.")  
If `name = None` and the `name != None and` code wasn't there, we would get an error

### Truthy and Falsy

These describe the nature of the values `True` and `False` - the former is obviously truthy and the latter falsy, but what about other values?  
Most are truthy, the exceptions are as follows:

+ False
+ None
+ 0
+ 0.0
+ 0j
+ "" (an empty string)
+ [] (an empty list)
+ {} (an empty dictionary)
+ () (an empty tuple)
+ set() (an empty set)
+ frozenset() (an empty frozenset)
+ range(0) (an empty range)

Values don't have to be `True` to be truthy:

        num = 5
        if num:
            print('truthy value')
        else:
            print('falsy value')

  + Note that `num` does not equal `True`, it is simply *truthy*

Using `if name` to test for empty strings works, but is discouraged  
Instead, use `if name == ''` to test for empty strings


## Virtual Environments (venv)

+ These are created to enable programs to be run within them that may need different software versions
+ Instead of changing PATHs to run an older software version, install all versions and then just set them up in the venv depending on the program's needs 
+ You can then activate/deactivate the venv and it will have the versions you need

1. Create a directory (~/.venv) to store them in 
2. `python3.9 -m venv ~/.venv/env_a`
   + uses Python 3.9 to create a venv called 'env_a'
   + `-m venv` tells Python to run the venv module
3. `source ~/.venv/env_a/bin/activate`
   + activates env_a
4. `deactivate`
   + returns to default environment and versions

## Pseudocode

Code for humans - in plain english and describes a logical process (logical domain layer)

The second part is the syntactical programming language layer (i.e. actually writing the code) doing both at once is hard

The issue is that can't verify that it works programmatically

### Formal Pseudocode

        Keyword	    Meaning
        START	    start of the program
        SET	        set a variable that we can use for later
        GET	        retrieve input from user
        PRINT	    display output to user
        READ	    retrieve a value from a variable
        IF/ELSE 	show conditional branches in logic
        WHILE	    show looping logic
        SUBPROCESS  self-contained block of logic
        END	        end of the program

Using the above keywords, we can make the pseudocode a bit easier more universal and slightly closer to real code, but it still can't be verified

*Example*: "Write a function that takes one integer argument and returns True when the number's absolute value is odd, False otherwise."

*Pseudocode*:

+ Take a single input
+ Check if it is an integer and return a prompt if not
+ Ensure we take the absolute value of the integer
+ Check if it is odd, return True if so
+ Otherwise, return False

*Formal Pseudocode*:

        START
        READ argument from function call
        IF input type is not an integer:
            PRINT prompt for an integer
        IF input type is an integer:
            READ absolute value of input
            IF result of dividing input by 2 is 1:
                PRINT True
            IF result of dividing input by 2 is not 1:
                PRINT False
        END

See [Exercise 1](../lesson_1/easy_1/01%20Isn't%20it%20Odd) for Python code

For large projects, we can't put the whole thing into pseudocode and hope to translate it into formal pseudocode and then programming language; we need to take each piece step by step to test the logic, before moving on to the next piece.

Further examples from Lesson 2 can be found [here](./Pseudocode%20Practice)

## Flowcharts

These show the logic flow to solve the problem - called the imperative/procedural way  
Pseudocode can be converted into a flowchart but can include sub-processes (in rectangle boxes) that have self-contained functionality 

## Pylint

Static code analyser:

+ Enforces good style guide - PEP 8
+ Identifies potential logic errors - code linter:
  + Convention - standard programming violations
  + Refactor - bad code smell
  + Warning - python specific
  + Error - broken code
  + Fatal - prevent further processing
  
Rules can be configured using a `.pylintrc` file (usually created in the project directory)

Must sit in the directory that the project you are running is in

## Debugging

