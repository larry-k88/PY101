# Lesson 2 Contents

+ [Truthiness](#truthiness)
+ [Virtual Environments](#virtual-environments-venv)
+ [Pseudocode](#pseudocode)
+ [Flowcharts](#flowcharts)
+ [Pylint](#pylint)
+ [Debugging](#debugging)
+ [Errors](#errors)
+ [Precedence](#precedence)
+ [Type Conversions](#type-conversions)
+ [Tips](#tips)
+ [Variables and Functions](#variables-and-functions)
+ [NaN](#nan)

## Truthiness

### Booleans

These actually capture `True` and `False` rather than *truthy* and *falsy* - they are the definitive versions of truthiness  
[**Logical Operators**](#logical-operators) will evaluate their operands and return boolean value:

        num = 4
        num < 10    # True

The return of a Boolean isn't often useful, but *using* that returned Boolean value of a conditional expression is useful:

        num = 4
        if num < 3: # evaluates as True
            print('less than 3') # therefore, this line is executed
        else:
            print('3 or more')

### Logical Operators

#### `and`

+ Returns `True` when **all** sub-expressions evaluate to `True`
+ Sub-expressions can be chained and are evaluated from left to right:

        num = 10

        (num > 2) and (num < 15) and (num % 2 == 0)
            # True: between 2-15 and even

        (num > 2) and (num < 15) and (num % 2 == 1)
            # False: between 2-15 and odd

  + If **any** are `False`, the whole expression will return `False`
  + Parentheses not required (`<` and `>` have *higher* precedence than `and`), but it's clearer and foolproof to include them

#### `or`

+ Returns `True` when **either** sub-expression (the operands) evaluate to `True`
+ Can also be chained as above:

        num = 10

        (num > 2) or (num < 15) or (num % 2 == 0)
            # True: more than 2, or less than 15 or even

        (num > 2) or (num < 15) or (num % 2 == 1)
            # True: more than 2, or less than 15 or odd

#### `not`

+ Returns the inverse of the truth value of the condition ('logical negation'):

        num = 10
        
        num > 2         # True
        not (num > 2)   # False

### Short-Circuits

This is the idea that Python can stop evaluating sub-expressions if it already knows the evaluation of the whole expression

Expressions containing `and` and `or` exhibit this, as they move from left to right. They will short circuit when:

+ A sub-expression in an `and` expression evaluates as `False`
+ A sub-expression in an `or` expression evaluates as `True`

The remaining expressions are ***not*** evaluated which can be useful if they might contain exceptions (errors):

    if name != None and name.isupper():
        print(f"Hi, {name}.")
    else:
        print("Hello, whoever you are.")


  + Here, the variable `name` must be anything other than `None` to avoid an error. If it's in CAPS, it will print "Hi, {name}" but if not, it will print ("Hello, whoever you are.")  
  + If `name = None` and the `name != None and` code wasn't there, we would get an error

### Truthy and Falsy

These describe the nature of the values `True` and `False` - the former is obviously truthy and the latter falsy, but what about other values?  
Most are truthy, the exceptions are as follows:

+ False
+ None
+ 0
+ 0.0
+ 0j
+ "" (an empty string)
+ [] (an empty list)
+ {} (an empty dictionary)
+ () (an empty tuple)
+ set() (an empty set)
+ frozenset() (an empty frozenset)
+ range(0) (an empty range)

Values don't have to be `True` to be truthy:

        num = 5
        if num:
            print('truthy value')
        else:
            print('falsy value')

  + Note that `num` does not equal `True`, it is simply *truthy*

Using `if name` to test for empty strings works, but is discouraged  
Instead, use `if name == ''` to test for empty strings


## Virtual Environments (venv)

+ These are created to enable programs to be run within them that may need different software versions
+ Instead of changing PATHs to run an older software version, install all versions and then just set them up in the venv depending on the program's needs 
+ You can then activate/deactivate the venv and it will have the versions you need

1. Create a directory (~/.venv) to store them in 
2. `python3.9 -m venv ~/.venv/env_a`
   + uses Python 3.9 to create a venv called 'env_a'
   + `-m venv` tells Python to run the venv module
3. `source ~/.venv/env_a/bin/activate`
   + activates env_a
4. `deactivate`
   + returns to default environment and versions

## Pseudocode

Code for humans - in plain english and describes a logical process (logical domain layer)

The second part is the syntactical programming language layer (i.e. actually writing the code) doing both at once is hard

The issue is that can't verify that it works programmatically

### Formal Pseudocode

        Keyword	    Meaning
        START	    start of the program
        SET	        set a variable that we can use for later
        GET	        retrieve input from user
        PRINT	    display output to user
        READ	    retrieve a value from a variable
        IF/ELSE 	show conditional branches in logic
        WHILE	    show looping logic
        SUBPROCESS  self-contained block of logic
        END	        end of the program

Using the above keywords, we can make the pseudocode a bit easier more universal and slightly closer to real code, but it still can't be verified

*Example*: "Write a function that takes one integer argument and returns `True` when the number's absolute value is odd, `False` otherwise."

*Pseudocode*:

+ Take a single input
+ Check if it is an integer and return a prompt if not
+ Ensure we take the absolute value of the integer
+ Check if it is odd, return True if so
+ Otherwise, return False

*Formal Pseudocode*:

        START
        READ argument from function call
        IF input type is not an integer:
            PRINT prompt for an integer
        IF input type is an integer:
            READ absolute value of input
            IF result of dividing input by 2 is 1:
                PRINT True
            IF result of dividing input by 2 is not 1:
                PRINT False
        END

See [Exercise 1](../lesson_1/easy_1/01%20Isn't%20it%20Odd) for Python code

For large projects, we can't put the whole thing into pseudocode and hope to translate it into formal pseudocode and then programming language; we need to take each piece step by step to test the logic, before moving on to the next piece.

Further examples from Lesson 2 can be found [here](./Pseudocode%20Practice)

## Flowcharts

These show the logic flow to solve the problem - called the imperative/procedural way  
Pseudocode can be converted into a flowchart but can include sub-processes (in rectangle boxes) that have self-contained functionality 

## Pylint

Static code analyser:

+ Enforces good style guide - PEP 8
+ Identifies potential logic errors - code linter:
  + Convention - standard programming violations
  + Refactor - bad code smell
  + Warning - python specific
  + Error - broken code
  + Fatal - prevent further processing
  
+ Rules can be configured using a `.pylintrc` file (usually created in the project directory)
  + Must sit in the directory that the project you are running is in

## Debugging

Many techniques exits and vary from person to person; some options include:

+ Reproduce the error
+ Determine the boundaries of the error - which part of the line has the error
  + The explanation of the error may help here
+ Trace the code - the stack trace shows how far the program got before the error, so this shows that anything above the error line is fine (known as 'trapping the error')
+ Understand the problem well - what is the actual programmatic issue?
+ Implement a fix - `try` clauses are not fixing problem origin, merely putting a plaster on them (but may be all that's available to you if the code isn't yours).
  + Fix the source of the error if possible, right back at the origin
  + Fix one problem at a time
  + Test it - use manual inputs to check edge cases
  
#### Techniques

+ Go line by line - be patient and read the details
+ Rubber duck debugging - can help notice previously missed details
+ Walk away - after the problem is 'loaded' into your brain
+ Use `print` at carefully placed positions to analyse the code
+ Use a debugger, like pdb:
  + Insert `breakpoint()` and run the code
  + Use `c` to step through until the next breakpoint
  + Use `n` to step through the next line
  + Use `p` and a variable or expression to check the expected outcomes

## Errors

These are actually **exception objects** which are created when the interpreter cannot continue executing the program: the object describes the problem and stops the program

### Terminology

Python *raises* an exception but *throwing* exceptions/errors are common phrases

#### NameError

+ Using a variable or function that is undefined

#### TypeError

+ Using a value of the wrong type in an expression

        word = 'hello'
        word.find(42) # TypeError

+ Calling an object that isn't callable

        number = 42
        number() # TypeError

#### SyntaxError

+ These are unique as they arises after loading the program, but *before* it runs
+ Encounters code that break syntactic rules, e.g. missing trailing quote:

        print('hello) # SyntaxError

#### ValueError

+ Using the correct data type, but the value is inappropriate for the operation

        number = int('abc') # ValueError
        number = int('45') # number reassigned to 45

#### IndexError

+ Trying to access an index outside the range

        numbers = [1, 2]
        numbers[2] # IndexError

#### KeyError

+ Trying to access a dictionary key that doesn't exist

        dictionary = {'Barry': 5, 'Gary' : 4, 'Harry' : 5}
        dictionary['Barry'] # 5
        dictionary['Larry'] # KeyError

#### ZeroDivisionError

+ Dividing by zero either using `/` or `%`

        result_1 = 10 / 0 # ZeroDivisionError: division by zero
        result_2 = 10 % 0 # ZeroDivisionError: integer modulo by zero

### Exception Handling

+ Allows you to try and manage errors using statements:
  + `try`
  + `except`
  + `else`
  + `finally`

1. The code that might raise the exception is placed inside the `try` block  
   a. Python will monitor the block for exceptions
2. If one is found, Python will look for a matching `except` block to handle the specific type of exception  
   a. If a match is found, the code within the `except` block is run
3. If no exceptions are in the `try` block are raised, this code runs
4. Any code in the `finally` block runs regardless of any exceptions being raised 

Example:

    try:
        num_str = input("Enter a number: ")
        num = int(num_str)

        result = 10 / num
    except ValueError:
        print("Invalid input. Please enter a valid number.")
    except ZeroDivisionError:
        print("Cannot divide by zero.")
    else:
        print(f"Result: {result}")
    finally:
        print("Exception handling complete.")

This catches occurrences when use enters something that isn't an integer (such as a float, or string), or 0

### Preventing Errors

#### Look Before You Leap (LBYL)

+ This process checks for potential errors prior to executing, typically using guard clauses that return an output if some specific criteria aren't met  
+ For example, you need an argument to be a string for the function to run:

        if type(arg) != str:
            return arg

+ This just returns the argument if it's not a string, instead of throwing an error
+ Guard clauses are best used to ensure arguments are valid, unless you are confident that the argument will always be a string (e.g. via prior confident programming)


#### It's Easier to Ask Forgiveness than Permission (EAFP)

+ Typically this process uses [exception handling](#exception-handling)
+ Tries code without any explicit checks/guard clauses and deals with exceptions
  
### Edge Cases

+ These involve dealing with values at the edges of potential value ranges
+ E.g.:
  + Expecting a number but we have 0, or a negative
  + Expecting a whole number but getting a float or a fraction
  + Expecting a collection but getting an empty collection
  + Dealing with leading/trailing white space, special characters or solely spaces
+ Worth testing some edge cases to evaluate the code

## Precedence

+ Not necessarily simply the order that operators are evaluated, but that's the basic idea
+ Don't rely on you/others knowing the precedence, use parentheses to make it clear
+ Operators with high precedence *bind* to their operands more tightly:

        3 + 5 * 7 # 38

  + `*` binds more tightly to `5` and `7` and is evauluated first
  + `+` then binds to `3` and `35`

+ Python will go through an expression and evaluate what it can *without* calling operators:

        def value(n):
            print(n)
            return n
        
        print(value(3) + value(5) * value(7))

  + The functions are evaluated before the operands, therefore it prints each number on a separate line, and then the evaluation of `3 + 5 * 7` which, from before, is `38`

#### Short-circuiting

+ This is a special case and Python treats `and` and `or` differently:

        5 and 1 / 0           # ZeroDivisionError
        None or 1 / 0         # ZeroDivisionError

        None and 1 / 0           # None
        5 or 1 / 0               # 5
  + The division is *not* done first in the second 2 examples, instead, they short-circuit and return the first operand - the `1 / 0` expression is never evaluated

## Type Conversions

+ Process of converting one type into another - also known as 'coercion' and has two variations: explicit and implicit

### Explicit Coercion

Intentional use of a built-in function to covert one to another:

#### Values to Integers

+ `int`()
+ Will only work with 'numerical' strings, e.g.
  + '500' - returns 500
  + 5.42 - returns 5
  + Byte-like objects (not discussed now)
  + True/False - returns 1/0

+ On a non-numerical string, will raise `ValueError`, e.g.
  + 'abc' - returns ValueError

+ On any other type, it will raise a `TypeError`

#### Values to Floats

+ `float`()
+ Works similarly to `int()`, other than...
+ Special 'Non-a-Number' value: `nan` - arises from operations with no meaningful result:
      
        result = float('inf') - float('inf') # nan
+ Note than `float('NaN')` returns `nan`

#### Values to Strings

+ `str()`
+ Works with all built-in data types
+ The `print()` function automatically coerces its arguments to strings, but isn't considered coercion as it doesn't return strings, it prints them
+ String interpolation ('f-strings') coerces the values in the expression to strings

        name = 'George'
        age = 28
        print(f'My name is {name} and I am {age})
        # `name` and `age` are converted to strings
+ `repr() `is similar but returns the string representation of the object:
  + Note that when you use the `print()` function, it strips away the quotes:
    + [feedback on repr() vs str() - assingment 20]

#### Values to Booleans

+ `bool()`
+ Works will all built-in data types and non-built-in values
+ It uses the truthiness to evaluate as `True` or `False`

        bool(None) # False
        bool([1, 2, 3]) # True

### Implicit Coercion

+ Also known as automatic coercion - without programmer's direct instruction

#### Combining Integer and Float

+ Python automatically converts the integer to a float before the operation
  + The result will be a float

#### Combining String with Non-string

+ Combining a string with a number will raise a `TypeError`
+ This is different in the `print()` function which converts integers to strings before printing (not considered coercion as it takes place behind the scenes)

### Confirming Data Structures

+ To check/confirm what data type you have, use the `isinstance()` function, rather than `is` - it also checks whether it is a subclass
+ `is` doesn't check for subclasses matches and therefore may not be accurate (especially when you create your own classes) 
+ Avoid using the `==` operator unless checking the value of a variable

        numbers = [1, 2, 3, 4]
        isinstance(numbers, list) # True
        isinstance(numbers, str) # False

## Tips

### Naming Things

+ Don't try to save characters on variable names - be descriptive
+ Don't 'hardcode' possible values in case of future changes (e.g. call it `play_again`, rather than `yes_or_no`)
+ Try to use idiomatic names:
  + Non-constants and object properties, functions, methods: snake_case
    + `number_of_people`, `var_` (deconflicts with keywords), `_var` (internal use only)
  + Classes: CamelCase or Capwords
    + `BoxTurtle`, `BlackCat`
  + Constants: SCREAMING_SNAKE_CASE
    + `MIN_AGE`, `DEFAULT_TIMEOUT`
+ Non-idiomatic (but valid) names are not recommended, but useable
  + `π`, `milesperhour`, `user_Profile`
+ Invalid names cannot be used:
  + `42ndStreet` (begins with digits), `happy-days` (hyphen), `for` (keyword)

### Magic Numbers

+ Numbers (or other simple values) that appear in various places without any particular information relating to them
+ e.g. the number `5` when programming about a card-game with 5 cards in a players' hand - the number may appear in other places too, such as a 'best-of-five' match
  + Best to set the magic numbers as a constant at the top of the program
+ Numbers may also appear when referring to Unicode tables and can be unclear. Rather than:

        FIRST_CHARACTER_CODE = 97 # refers to the letter `a`
        LAST_CHARACTER_CODE = 122 # refers to the letter `z`

    use:

        FIRST_CHARACTER_CODE = ord('a')
        LAST_CHARACTER_CODE = ord('z')

### Mutating Constants

+ Avoid using any mutating operations (e.g. appending lists, index reassignment or `pop()`) on constants - Python will allow them to happen but it should be avoided

### Mutating Collections

+ Avoid mutating the collection during iterations:
  
        words = ['scooby', 'do', 'on', 'channel', 'two']

        for word in words:
            print(word) # scooby, on, two (in that order)
            words.remove(word)

        print(words) # ['do', 'channel']

  + As the iterations go on, the collection changes, so the built-in functions act on a different collection of objects each time
  + Mutating individual objects within the collection is fine, e.g. one of a pair of data within a collection can be deleted:

        pairs = [[6, 'scooby'], [2, 'do']]

        for pair in pairs:
        pair.pop(0)
        # removes item at index 0 from each pair

        print(pairs)  # prints [['scooby'], ['do']]

### Variable Shadowing

+ This is when a global variable name is used inside a function - best avoided
+ Even if the `global` keyword is used in the function, this is just reassign the global variable
  + Use another variable name instead

### Using `_` as a variable

+ This is done when we don't need the variable we are extracting from the data:

        names = ['kim', 'joe', 'sam']
        for _ in names:
            print('Got a name!')

+ If there are two items in a sequence, but you only need one, `_` can be used:
  + NB `enumerate()` iterates over a sequence and couples the index to the value:


        list(enumerate(names)) # [(0, 'kim'), (1, 'joe'), (2, 'sam')]

  + So if we then wanted the indexes only (i.e. the value is not needed):

        for index, _ in enumerate(names):
            print(f'{index}: Got a name!')
        # 0: Got a name!
        # 1: Got a name!
        # 2: Got a name!
    + The `index, _` assigns each part of the tuple to the variables `index` and `_` respectively, indicating that we aren't using the value

### F-Strings

+ If code is to be split over multiple lines, brackets are needed around f-strings, as well as `f'` at the start of each line and `'` at the end
   
        return(f'Hello, nice to have a '
               f'{status['title']} {status['occupation']} '
                'around.) # doesn't need the f as no interpolation in the line
        
    + Best to keep spaces at the end of lines

### Functions

#### Guidelines

+ Use descriptive names for functions:
  + Those with outputs could have the prefix `display_` or `print_` - this will tell you it outputs something visual rather than returns a value
+ They should do one thing, and be relatively short (10 or so lines)
+ The parameters (if any) are placeholders for the real values you intend to pass as arguments later - name the parameters differently to the arguments
+ Their names should hint at what they do, mutate or return. E.g.
  
        def updated_cards(total, cards)
        # probably mutates one of the arguments, therefore the return value shouldn't be significant

+ If they are longer, consider splitting into 2 functions
+ A function should *either* return a useful value *or* have a [side effect](#side-effects), not both (avoid `get_and_display_total()`, split it up)
  + A useful value has meaning to calling the code - something that returns an arbitrary number or the same value, like `None`, is not usually useful
+ There will be exceptions to this, such as reading from a database, writing to the terminal and also returning it
+ Function names should reflect the purpose:
  + `display_total` implies it will print the total (i.e. a side effect)
  + `compute_total` implies it will return the value of the calculation
+ Functions that display something could be prefixed with `print`, `say`, or `display` - these should not return values or mutate arguments, and probably use the `print()` function 
+ Learn when to use `while` loops, or generic `while True` loops

#### Side Effects

+ Reassigns a non-local variable
    + e.g. one in an outer scope
+ Modifies value of a data structure passed as an argument, or accessed from an outer scope
    + e.g. appending an element to a list argument

            def add_to_list(target_list, value_to_append):
                target_list.append(value_to_append)
                return target_list # This returns a useful value AND has a side effect

+ Reads or writes to a file, network connection, browser or system hardware
    + e.g. printing and reading input from the terminal

            def display_total(num1, num2):
                print(num1 + num2)

+ Raises an exception without handling it
+ Calls another function which has side effects

#### Abstraction levels

+ Functions should work in isolation, in the REPL, for example
+ They should work with inputs, and produce outputs: when calling them, you shouldn't need to think about implementation

### White Spaces

+ Use blank lines in a similar way to when writing, as though they are paragraphs

## Variables and Functions

+ Assigning a variable inside a function creates a new one that only exists in the function:

        my_var = 1

        def my_func():
            my_var = 2 # exists only in the function scope

        my_func()
        print(my_var) # Output: 1, not 2

+ However, mutating an element assigned to a variable, doesn't create a new variable:

        my_var = [1]

        def my_func():
            my_var[0] = 2 

        my_func() # reassigns first element to '2'
        print(my_var) # Output: 2

+ The `append()` function mutates the object passed as an argument (`my_var`):

        my_var = [1]

        def my_func(my_var):
            my_var.append(2)

        my_func(my_var)
        print(my_var)  # Output: [1, 2]

    + If the function assigns something, the variable is shadowed (i.e. a new one is created)

### Variable Scope

+ Scope is the part of the program that can access a particular variable:  

#### Global

+ Keyword:
  + `global` - tells Python to look in the global scope (instead of creating a new one)
    + It's possible to create a variable if it doesn't exist already
+ Outermost scope
+ Any variable not in a function have global scope - can be accessed from anywhere, including inside functions

#### Local

+ The scope where it is created, usually inside a function (or a nested function)
+ Rule 1:
  + Variables defined in a function are local to it (cannot be accessed in outer scope)
+ Rule 2:
  + Variables defined in a function are local unless marked `global` or `nonlocal`
+ Rule 3:
  + Variables used, but not reassigned, may be in the outer scope (reassigning will create a new variable)
+ Rule 4:
  + Peer scopes do not conflict - two functions with the same variable can exist, each with different values 
+ Rule 5: 
  + Nested function have their own scope - inner scopes can access outer scopes, but not the other way round
  
+ NB variables defined in blocks, like `if` or `while` loops do not have their own scope in the same way that functions do

### Pass by Reference, Pass by Value

+ Pass by reference appears to be when the argument in a function is simply a reference to the original/actual object - therefore, any action the function takes would alter (mutate) the original
+ Pass by value appears to be the opposite - the value is passed as the argument, so any action the function takes only alters within the function: the original is untouched

+ The processes can be aligned with mutating (pass by reference) and non-mutating (pass by value) actions

+ Python passes a reference to the object (not a copy of the object) - called 'pass by object reference'
+ Whether the function mutates the object depends on the mutability of that object
+ If the object can be mutated, the original will be affected

**
 
  + `nonlocal` - only in nested functions, looks in the outer function
    + Not possible to create one if it doesn't exist already

## NaN

+ "Not a Number" - represents missing/unidentified data
+ It is a floating-point value represented by `float('nan')`
+ In order to determine if something is `nan`, we can't use `==`. Instead we, import math and use `math.isnan()`:

        import math
        
        nan_value = float('nan')
        math.isnan(nan_value) # True
