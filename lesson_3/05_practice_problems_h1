'''
Q1: Will the following functions return the same results?

def first():
    return {
        'prop1': "hi there",
    }

def second():
    return
    {
        'prop1': "hi there",
    }

print(first())
print(second())

No, second() sees the new line after return and ends the function
Indented block after return is unreachable

Q2: What does the last line in the following code output?

dictionary = {'first': [1]}
num_list = dictionary['first']
num_list.append(2)

print(num_list) [1, 2]
print(dictionary) # {'first: [1, 2]}

num_list points to the original dictionary (pass by value reference)
When num_list is mutated, it's the original that's being updated

Q3: Given the following similar sets of code, what will each code
snippet print?

A:
def mess_with_vars(one, two, three):
    one = two
    two = three
    three = one

one = ["one"]
two = ["two"]
three = ["three"]

mess_with_vars(one, two, three)

print(f"one is: {one}")
print(f"two is: {two}")
print(f"three is: {three}")

one is: ['one']
two is: ['two']
three is: ['three']

--> Regardless of what the function is doing, the variables unchanged
--> The variables within the function have the same names as those
outside - called variable shadowing
--> Printing the values of one, two and three from within the function
will give the outcome of the "messing up" (NB the final line of the
function reassigns `three` to the value that `one` has, which, after the
first line of the function, is now `two`)

B:
def mess_with_vars(one, two, three):
    one[0] = "two"
    two[0] = "three"
    three[0] = "one"

one = ["one"]
two = ["two"]
three = ["three"]

mess_with_vars(one, two, three)

print(f"one is: {one}")
print(f"two is: {two}")
print(f"three is: {three}")

one is: ['two']
two is: ['three']
three is: ['one']

--> The line `one[0] = 'two'` reassigns the 1st (and only) value in the 
list: so it changes from ["one"] to ["two"]. `one` has been mutated (not
reassigned) and therefore the variable outside the function also shows 
that reassignment
--> Same applies to both other lines
      
Q4: Ben was tasked to write a simple Python function to determine
whether an input string is an IP address using 4 dot-separated numbers,
e.g., 10.4.5.11.

Alyssa supplied Ben with a function named is_an_ip_number. It
determines whether a string is a numeric string between 0 and 255 as
required for IP numbers and asked Ben to use it. Here's the code that
Ben wrote:

def is_dot_separated_ip_address(input_string):
    dot_separated_words = input_string.split(".")
    while len(dot_separated_words) > 0:
        word = dot_separated_words.pop()
        if not is_an_ip_number(word):
            break

    return True

Alyssa reviewed Ben's code and said, "It's a good start, but you missed
a few things. You're not returning a false condition, and you're not
handling the case when the input string has more or less than 4
components, e.g., 4.5.5 or 1.2.3.4.5: both those values should be
invalid."

def is_dot_separated_ip_address(input_string):
    dot_separated_words = input_string.split(".")
    if len(dot_separated_words) != 4: # This returns False if there are 
        return False                  # not 4 strings once split  
    while len(dot_separated_words):   # No need to > 0  
        word = dot_separated_words.pop()
        if not is_an_ip_number(word):
            return False              # Instead of break, return False
    return True

def is_an_ip_number(str):
    if str.isdigit():
        return True if int(str) in range(0, 256) else False
    return False

Q5: What do you expect to happen when the greeting variable is
referenced in the last line of the code below?

if False:
    greeting = "hello world"

print(greeting)

Function never runs, so no variable called 'greeting' is ever defined
Therefore, NameError


'''