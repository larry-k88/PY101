'''
Q1: Let's do some "ASCII Art": a stone-age form of nerd artwork from
back in the days before computers had video screens.

For this practice problem, write a program that outputs The Flintstones
Rock! 10 times, with each line prefixed by one more hyphen than the line
above it. The output should start out like this:

text = 'The Flintstones Rock!'
for i in range(1, 11):
    print(f'{i * '-'} {text}')

Q2: Alan wrote the following function, which was intended to return all
of the factors of number:

def factors(number):
    divisor = number
    result = []
    while divisor > 0:
        if number % divisor == 0:
            result.append(number // divisor)
        divisor -= 1
    return result

Alyssa noticed that this code would fail when the input is a negative
number, and asked Alan to change the loop. How can he make this work?
Note that we're not looking to find the factors for negative numbers,
but we want to handle it gracefully instead of going into an infinite
loop.

`number % divisor == 0` checks if the number is exactly divisible (i.e. 
no remainder) - the expression is Truthy if so

Q3: Alyssa was asked to write an implementation of a rolling buffer.
You can add and remove elements from a rolling buffer. However, once
the buffer becomes full, any new elements will displace the oldest
elements in the buffer.

She wrote two implementations of the code for adding elements to the
buffer: 

def add_to_rolling_buffer1(buffer, max_buffer_size, new_element):
    buffer.append(new_element)
    if len(buffer) > max_buffer_size:
        buffer.pop(0)
    return buffer

def add_to_rolling_buffer2(buffer, max_buffer_size, new_element):
    buffer = buffer + [new_element]
    if len(buffer) > max_buffer_size:
        buffer.pop(0)
    return buffer

What is the key difference between these implementations?

The latter is reassigning `buffer + [new_element]` to a new variable,
called `buffer`. The former is mutating the original list.
      
Q4: What will the following two lines of code output?

print(0.3 + 0.6)
print(0.3 + 0.6 == 0.9)

0.8999999
False

This is because of the lack of precision with floats. Import `math` and 
use math.isclose(0.3 + 0.6, 0.9) instead

Q5: What do you think the following code will output?

nan_value = float("nan")
print(nan_value == float("nan"))

False - you cannot use `==` to check whether a value is `nan`
Must use math.isnan():

import math
nan_value = float("nan")
print(math.isnan(nan_value))

Q6: What is the output of the following code?

answer = 42

def mess_with_it(some_number):
    return some_number + 8

new_answer = mess_with_it(answer)

print(answer - 8)

Output is `34`. Printing `new_answer - 8` will output 42.

Q7: One day, Spot was playing with the Munster family's home computer,
and he wrote a small program to mess with their demographic data, then
called the function (as seen below). Before Grandpa could stop him,
Spot hit the Enter key with his tail. Did the family's data get
ransacked? Why or why not?

munsters = {
    "Herman": {"age": 32, "gender": "male"},
    "Lily": {"age": 30, "gender": "female"},
    "Grandpa": {"age": 402, "gender": "male"},
    "Eddie": {"age": 10, "gender": "male"},
    "Marilyn": {"age": 23, "gender": "female"},
}

def mess_with_demographics(demo_dict):
    for key, value in demo_dict.items():
        value["age"] += 42
        value["gender"] = "other"

mess_with_demographics(munsters)

The operation are mutating the original dictionary (as the reference to 
the dictionary is passed to the function, not a copy of it). Any changes
to the values (even the nested dictionary) will be to the original data.
Assigning a new variable to a deepcopy of the original (inside the
function) will ensure the original is unchanged.

Q8: Function and method calls can take expressions as arguments.
Suppose we define a function named rps as follows, which follows the
classic rules of the rock-paper-scissors game, but with a slight twist:
in the event of a tie, it just returns the choice made by both players.

def rps(fist1, fist2):
    if fist1 == "rock":
        return "paper" if fist2 == "paper" else "rock"
    elif fist1 == "paper":
        return "scissors" if fist2 == "scissors" else "paper"
    else:
        return "rock" if fist2 == "rock" else "scissors"

What does the following code output?

paper
        
Q9: Consider these two simple functions:

def foo(param="no"):
    return "yes"

def bar(param="no"):
    return (param == "no") and ("yes" or "no")

What will the following function invocation return?

bar(foo()) # False

foo() always evaluates to "yes"
Therefore, we look at:

def bar(param="no"):
    return (param == "no") and ("yes" or "no")

bar("yes")

The `and` in the return will short-circuit if (param == "no") is False
param == "no" checks if the parameter (called param) of the function is
equal to "no". Given that it is "yes", this evaluates to False.

Q10: In Python, every object has a unique identifier that can be
accessed using the id() function. This function returns the identity of
an object, which is guaranteed to be unique for the object's lifetime.
For certain basic immutable data types like short strings or integers,
Python might reuse the memory address for objects with the same value.
This is known as "interning".

Given the following code, predict the output:


a = 42
b = 42
c = a

print(id(a) == id(b) == id(c))

True
a points to 42
b points to the same 42 (it's interned, rather than creating another
object)
c points to the same 42 that a is pointing to.
a and c definitely have the same id, b also does through interning

'''