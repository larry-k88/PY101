'''
Print all odd numbers from 1 to 99, inclusive,
with each number on a separate line.

Bonus Question: Can you solve the problem by iterating over just
the odd numbers?


Problem:    Take the numbers from 1 to 99 inclusive and print out each
            odd number on a new line
            Input - numbers 1-99 
            Output - odd numbers from that range
            Requirements:
                Input must be integer values from 1-99
                Output must be odd (i.e. % evaluates to 1/truthy)
                No specific guidance on other inputs

Examples:   range(1, 100) - would give the required range
            1, 3, 5 etc. (on different lines)

Data:       range constructor function
            for loop
            if statement
            modulo operator
            print inside the loop

Algorithm:  for the number in the range
                if odd (modulo operator):
                    print

** Bonus **                
Problem:    Take the odd numbers from 1 to 99 inclusive and print out
            each number on a new line
            Input - numbers 1-99
            Output - odd numbers from that list/range
            Requirements:
                Input must be integer values from 1-99
                Only odd numbers must be iterated over
                No specific guidance on other inputs

Examples:   range(1, 100, 2) - would give the required range of odd
            numbers

Data:       range constructor function, with step as '2'
            for loop
                print

Algorithm:  for the number in the range:
                print
'''

# Allows user to input their own range
lower_bound = int(input('Enter the first value of the range: '))
upper_bound = int(input('Enter the last value of the range: '))
if upper_bound < lower_bound:
    print('==> First value must be lower than second value')
    lower_bound = int(input('Enter the first value of the range: '))
    upper_bound = int(input('Enter the last value of the range: '))

# for _ in range (lower_bound, upper_bound + 1):
#     if _ % 2 == 1:
#         print (_)

if lower_bound % 2 == 0:
    lower_bound += 1
for _ in range (lower_bound, upper_bound + 1, 2):
    print(_)

# Further exploration - Lines 53-58
